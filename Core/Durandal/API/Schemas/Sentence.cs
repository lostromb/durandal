
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.0.0
//   File : Durandal.API.Sentence_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Durandal.API
{
    using Durandal.Common.Collections;
    using System.Collections.Generic;

    public class Sentence
    {
        /// <summary>
        /// The unmodified written text of this sentence
        /// </summary>
        public string OriginalText { get; set; }

        /// <summary>
        /// A list of wordbreaker output words
        /// </summary>
        public List<string> Words { get; set; }

        /// <summary>
        /// A list of indices marking where each corresponding word begins in the original text
        /// </summary>
        public List<int> Indices { get; set; }

        /// <summary>
        /// If this sentence was spoken, this is the lexical form.
        /// This MUST BE an IPA syllable string.
        /// </summary>
        public string LexicalForm { get; set; }

        /// <summary>
        /// A list of "other stuff" that was found between each word.
        /// Index 0 is the stuff before word 0, index 1 is before word 1, etc. and the last item is what follows the last word in the sentence.
        /// </summary>
        public List<string> NonTokens { get; set; }
        
        public Sentence()
        {
            OriginalText = string.Empty;
            Words = new List<string>();
            Indices = new List<int>();
            LexicalForm = string.Empty;
            NonTokens = new List<string>();
        }

        public Sentence(string text) : this()
        {
            OriginalText = text;
            LexicalForm = string.Empty;
        }

        /// <summary>
        /// Returns the number of words in this sentence
        /// </summary>
        public int Length
        {
            get
            {
                return Words == null ? 0 : Words.Count;
            }
        }

        public Sentence Clone()
        {
            Sentence returnVal = new Sentence(OriginalText);
            returnVal.LexicalForm = LexicalForm;

            if (Indices == null)
            {
                returnVal.Indices = null;
            }
            else
            {
                returnVal.Indices.FastAddRangeList(Indices);
            }

            if (Words == null)
            {
                returnVal.Words = null;
            }
            else
            {
                returnVal.Words.FastAddRangeList(Words);
            }

            if (NonTokens == null)
            {
                returnVal.NonTokens = null;
            }
            else
            {
                returnVal.NonTokens.FastAddRangeList(NonTokens);
            }

            return returnVal;
        }

        public override string ToString()
        {
            if (Words.Count > 0)
            {
                return "{" + string.Join(",", Words) + "}";
            }

            return OriginalText;
        }
    }
} // Durandal.API
