
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.0.0
//   File : Durandal.API.InstrumentationData_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Durandal.API
{
    using Durandal.Common.Instrumentation;
    using Durandal.Common.Logger;
    using System;
    using System.Collections.Generic;

    public class InstrumentationEvent
    {
        private static readonly DateTimeOffset EPOCH_TIME = new DateTimeOffset(1970, 1, 1, 0, 0, 0, TimeSpan.Zero);

        public string TraceId { get; set; }

        public string Message { get; set; }

        public long Timestamp { get; set; }

        public short Level { get; set; }

        public string Component { get; set; }

        public ushort PrivacyClassification { get; set; }
        
        public InstrumentationEvent()
        {
            TraceId = "";
            Message = "";
            Component = "";
        }

        public static InstrumentationEvent FromLogEvent(LogEvent e)
        {
            return new InstrumentationEvent()
            {
                Message = e.Message ?? "",
                Component = e.Component ?? "",
                Level = (short)e.Level,
                TraceId = e.TraceId.HasValue ? CommonInstrumentation.FormatTraceId(e.TraceId.Value) : "",
                Timestamp = (long)(e.Timestamp.ToUniversalTime() - EPOCH_TIME).Ticks,
                PrivacyClassification = (ushort)e.PrivacyClassification
            };
        }

        public LogEvent ToLogEvent()
        {
            return new LogEvent(Component, Message, (LogLevel)Level, EPOCH_TIME.AddTicks(Timestamp), CommonInstrumentation.TryParseTraceIdGuid(TraceId), (DataPrivacyClassification)PrivacyClassification);
        }
    }

    public class InstrumentationEventList
    {
        public List<InstrumentationEvent> Events { get; set; }
        
        public InstrumentationEventList()
        {
            Events = new List<InstrumentationEvent>();
        }
    }

    public class SerializedMetricEvent
    {
        /// <summary>
        /// The base name of a counter that this metric measures
        /// </summary>
        public string CounterName;

        /// <summary>
        /// The serialized dimensions that augment this observation
        /// </summary>
        public string SerializedDimensions;

        /// <summary>
        /// The type of metric, represented as an <see cref="Durandal.Common.Instrumentation.CounterType">CounterType</see> enum cast to an integer.
        /// </summary>
        public int MetricType;

        /// <summary>
        /// An array segment of serialized metric values. A metric can have one or more values.
        /// For instant metrics, it is a single 32-bit signed int. Otherwise, each value is a IEEE double written as a 64-bit unsigned value to the array.
        /// So to decode, just increment every 8 bytes and call <see cref="BitConverter.Int64BitsToDouble(long)"/>.
        /// You might be asking why this is not a List of numeric values; the rationale is that this avoids overhead by reducing array allocations,
        /// and also it prevents the serialization from losing any information about the values, for special cases like denormals, infinity, NaN, etc.
        /// </summary>
        public ArraySegment<byte> SerializedValues;
    }

    public class SerializedMetricEventList
    {
        public List<SerializedMetricEvent> Events { get; set; }

        public SerializedMetricEventList()
        {
            Events = new List<SerializedMetricEvent>();
        }
    }
} // Durandal.API
