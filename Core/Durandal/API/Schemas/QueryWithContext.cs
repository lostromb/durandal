
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.0.0
//   File : Durandal.API.QueryWithContext_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Durandal.API
{
    using System.Collections.Generic;

    public class QueryWithContext
    {
        public RecoResult Understanding { get; set; }

        public List<RecoResult> PastTurns { get; set; }

        public int TurnNum { get; set; }

        public ClientContext ClientContext { get; set; }

        public ClientAuthenticationLevel AuthenticationLevel { get; set; }

        public InputMethod Source { get; set; }

        public AudioData InputAudio { get; set; }

        public int RetryCount { get; set; }

        public int? BargeInTimeMs { get; set; }

        public ClientAuthenticationScope AuthScope { get; set; }

        public QueryFlags RequestFlags { get; set; }

        public SpeechRecognitionResult OriginalSpeechInput { get; set; }

        public IDictionary<string, string> RequestData { get; set; }

        public QueryWithContext()
        {
            Understanding = new RecoResult();
            PastTurns = new List<RecoResult>();
            ClientContext = new ClientContext();
            AuthenticationLevel = ClientAuthenticationLevel.None;
            Source = InputMethod.Unknown;
            AuthScope = ClientAuthenticationScope.None;
            RequestFlags = QueryFlags.None;
            RequestData = new Dictionary<string, string>();
        }
    }
} // Durandal.API
