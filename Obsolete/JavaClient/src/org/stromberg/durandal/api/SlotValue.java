



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : org\stromberg\durandal\api\SlotValue.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package org.stromberg.durandal.api;


/**
* SlotValue
*/
@SuppressWarnings("all")
public class SlotValue implements com.microsoft.bond.BondSerializable, com.microsoft.bond.BondMirror {
    // TODO: implement
    public com.microsoft.bond.BondSerializable clone() {return null;}

    //
    // Fields
    //

    // 1: Required string Name
    private String Name;

    // 2: Required string Value
    private String Value;

    // 3: Required org.stromberg.durandal.api.SlotValueFormat Format
    private org.stromberg.durandal.api.SlotValueFormat Format;

    // 4: Required map<string, string> Annotations
    private java.util.HashMap<String, String> Annotations;

    // 5: Optional nullable<vector<string>> Alternates
    private java.util.ArrayList<String> Alternates;

    // 6: Optional string LexicalForm
    private String LexicalForm;

    /**
     * @return current value of Name property
     */
    public final String getName() {
        return this.Name;
    }

    /**
     * @param value new value of Name property
     */
    public final void setName(String value) {
        this.Name = value;
    }

    /**
     * @return current value of Value property
     */
    public final String getValue() {
        return this.Value;
    }

    /**
     * @param value new value of Value property
     */
    public final void setValue(String value) {
        this.Value = value;
    }

    /**
     * @return current value of Format property
     */
    public final org.stromberg.durandal.api.SlotValueFormat getFormat() {
        return this.Format;
    }

    /**
     * @param value new value of Format property
     */
    public final void setFormat(org.stromberg.durandal.api.SlotValueFormat value) {
        this.Format = value;
    }

    /**
     * @return current value of Annotations property
     */
    public final java.util.HashMap<String, String> getAnnotations() {
        return this.Annotations;
    }

    /**
     * @param value new value of Annotations property
     */
    public final void setAnnotations(java.util.HashMap<String, String> value) {
        this.Annotations = value;
    }

    /**
     * @return current value of Alternates property
     */
    public final java.util.ArrayList<String> getAlternates() {
        return this.Alternates;
    }

    /**
     * @param value new value of Alternates property
     */
    public final void setAlternates(java.util.ArrayList<String> value) {
        this.Alternates = value;
    }

    /**
     * @return current value of LexicalForm property
     */
    public final String getLexicalForm() {
        return this.LexicalForm;
    }

    /**
     * @param value new value of LexicalForm property
     */
    public final void setLexicalForm(String value) {
        this.LexicalForm = value;
    }

    /**
     * Schema metadata
     */
    public static class Schema {
        public static final com.microsoft.bond.SchemaDef schemaDef;
        public static final com.microsoft.bond.Metadata metadata;
        private static final com.microsoft.bond.Metadata Name_metadata;
        private static final com.microsoft.bond.Metadata Value_metadata;
        private static final com.microsoft.bond.Metadata Format_metadata;
        private static final com.microsoft.bond.Metadata Annotations_metadata;
        private static final com.microsoft.bond.Metadata Alternates_metadata;
        private static final com.microsoft.bond.Metadata LexicalForm_metadata;

        static {
            metadata = new com.microsoft.bond.Metadata();
            metadata.setName("SlotValue");
            metadata.setQualified_name("org.stromberg.durandal.api.SlotValue");


            // Name
            Name_metadata = new com.microsoft.bond.Metadata();
            Name_metadata.setName("Name");
            Name_metadata.setModifier(com.microsoft.bond.Modifier.Required);

            // Value
            Value_metadata = new com.microsoft.bond.Metadata();
            Value_metadata.setName("Value");
            Value_metadata.setModifier(com.microsoft.bond.Modifier.Required);

            // Format
            Format_metadata = new com.microsoft.bond.Metadata();
            Format_metadata.setName("Format");
            Format_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            Format_metadata.getDefault_value().setInt_value(org.stromberg.durandal.api.SlotValueFormat.TypedText.getValue());

            // Annotations
            Annotations_metadata = new com.microsoft.bond.Metadata();
            Annotations_metadata.setName("Annotations");
            Annotations_metadata.setModifier(com.microsoft.bond.Modifier.Required);

            // Alternates
            Alternates_metadata = new com.microsoft.bond.Metadata();
            Alternates_metadata.setName("Alternates");

            // LexicalForm
            LexicalForm_metadata = new com.microsoft.bond.Metadata();
            LexicalForm_metadata.setName("LexicalForm");

            schemaDef = new com.microsoft.bond.SchemaDef();
            schemaDef.setRoot(getTypeDef(schemaDef));
        }

        public static com.microsoft.bond.TypeDef getTypeDef(com.microsoft.bond.SchemaDef schema)
        {
            com.microsoft.bond.TypeDef type = new com.microsoft.bond.TypeDef();
            type.setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            type.setStruct_def(getStructDef(schema));
            return type;
        }

        private static short getStructDef(com.microsoft.bond.SchemaDef schema)
        {
            short pos;

            for(pos = 0; pos < schema.getStructs().size(); pos++)
            {
                if (schema.getStructs().get(pos).getMetadata() == metadata)
                {
                    return pos;
                }
            }

            com.microsoft.bond.StructDef structDef = new com.microsoft.bond.StructDef();
            schema.getStructs().add(structDef);

            structDef.setMetadata(metadata);

            com.microsoft.bond.FieldDef field;

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)1);
            field.setMetadata(Name_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)2);
            field.setMetadata(Value_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)3);
            field.setMetadata(Format_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_INT32);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)4);
            field.setMetadata(Annotations_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_MAP);
            field.getType().setKey(new com.microsoft.bond.TypeDef());
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getKey().setId(com.microsoft.bond.BondDataType.BT_STRING);
            field.getType().getElement().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)5);
            field.setMetadata(Alternates_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_LIST);
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getElement().setId(com.microsoft.bond.BondDataType.BT_LIST);
            field.getType().getElement().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getElement().getElement().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)6);
            field.setMetadata(LexicalForm_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            return pos;
        }
    }

    /*
    * @see com.microsoft.bond.BondMirror#getField()
    */
    public Object getField(com.microsoft.bond.FieldDef fieldDef) {
        switch (fieldDef.getId()) {
            case (short)1:
                return this.Name;
            case (short)2:
                return this.Value;
            case (short)3:
                return this.Format;
            case (short)4:
                return this.Annotations;
            case (short)5:
                return this.Alternates;
            case (short)6:
                return this.LexicalForm;
            default:
                return null;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#setField()
    */
    public void setField(com.microsoft.bond.FieldDef fieldDef, Object value) {
        switch (fieldDef.getId()) {
            case (short)1:
                this.Name = (String)value;
                break;
            case (short)2:
                this.Value = (String)value;
                break;
            case (short)3:
                this.Format = (org.stromberg.durandal.api.SlotValueFormat)value;
                break;
            case (short)4:
                this.Annotations = (java.util.HashMap<String, String>)value;
                break;
            case (short)5:
                this.Alternates = (java.util.ArrayList<String>)value;
                break;
            case (short)6:
                this.LexicalForm = (String)value;
                break;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#createInstance()
    */
    public com.microsoft.bond.BondMirror createInstance(com.microsoft.bond.StructDef structDef) {
        return null;
    }

    /*
     * @see com.microsoft.bond.BondMirror#getSchema()
     */
    public com.microsoft.bond.SchemaDef getSchema()
    {
        return getRuntimeSchema();
    }

    /**
     * Static method returning {@link SchemaDef} instance.
     */
    public static com.microsoft.bond.SchemaDef getRuntimeSchema()
    {
        return Schema.schemaDef;
    }

    // Constructor
    public SlotValue() {
        reset();
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("SlotValue", "org.stromberg.durandal.api.SlotValue");
    }

    protected void reset(String name, String qualifiedName) {
        
        Name = "";
        Value = "";
        Format = org.stromberg.durandal.api.SlotValueFormat.TypedText;
        if (Annotations == null) {
            Annotations = new java.util.HashMap<String, String>();
        } else {
            Annotations.clear();
        }
        Alternates = null;
        LexicalForm = "";
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, (com.microsoft.bond.SchemaDef)schema, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        reader.readBegin();
        readImpl(reader);
        reader.readEnd();
    }

    /*
     * Called to read a struct that is contained inside another struct.
     */
    public void readImpl(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        if (!reader.hasCapability(com.microsoft.bond.ProtocolCapability.TAGGED)) {
            readUntagged(reader, false);
        } else if (readTagged(reader, false)) {
            com.microsoft.bond.internal.ReadHelper.skipPartialStruct(reader);
        }
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        // read(com.microsoft.bond.internal.ProtocolHelper.createReader(reader, schema));
    }

    protected void readUntagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = reader.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);

        reader.readStructBegin(isBase);
        

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.Name = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"Name\", id=1");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.Value = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"Value\", id=2");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.Format = org.stromberg.durandal.api.SlotValueFormat.fromValue(reader.readInt32());
        }
        else
        {
            // throw new BondException("Missing required field \"Format\", id=3");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_Annotations(reader, com.microsoft.bond.BondDataType.BT_MAP);
        }
        else
        {
            // throw new BondException("Missing required field \"Annotations\", id=4");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_Alternates(reader, com.microsoft.bond.BondDataType.BT_LIST);
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.LexicalForm = reader.readString();
        }
        reader.readStructEnd();
    } // ReadUntagged()


    protected boolean readTagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean isPartial;
        reader.readStructBegin(isBase);

        // BitArray seenRequiredFields = new BitArray(5);

        while (true) {
            com.microsoft.bond.ProtocolReader.FieldTag fieldTag = reader.readFieldBegin();

            if (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP
             || fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE) {
                isPartial = (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE);
                break;
            }

            switch (fieldTag.id) {
                case 1:
                    this.Name = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(1, true);
                    break;
                case 2:
                    this.Value = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(2, true);
                    break;
                case 3:
                    this.Format = org.stromberg.durandal.api.SlotValueFormat.fromValue(com.microsoft.bond.internal.ReadHelper.readInt32(reader, fieldTag.type));
                    // seenRequiredFields.Set(3, true);
                    break;
                case 4:
                    this.readFieldImpl_Annotations(reader, fieldTag.type);
                    // seenRequiredFields.Set(4, true);
                    break;
                case 5:
                    this.readFieldImpl_Alternates(reader, fieldTag.type);
                    break;
                case 6:
                    this.LexicalForm = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                default:
                    reader.skip(fieldTag.type);
                    break;
            }

            reader.readFieldEnd();
        }

        reader.readStructEnd();

        //checkRequiredFieldsAreSeen(seenRequiredFields);
        return isPartial;
    }


    private void readFieldImpl_Annotations(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_MAP);
    
        com.microsoft.bond.ProtocolReader.MapTag tag1 = reader.readMapContainerBegin();
    
        for (int i2 = 0; i2 < tag1.size; i2++) {
            String key3 = "";
            String val4 = "";
    
            // Read key
                key3 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.keyType);
    
            // Read value
                val4 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.valueType);
            //
            this.Annotations.put(key3, val4);
        }
    
        reader.readContainerEnd();
    } // readFieldImpl_Annotations


    private void readFieldImpl_Alternates(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_LIST);
    
        com.microsoft.bond.ProtocolReader.ListTag tag1 = reader.readContainerBegin();
        com.microsoft.bond.internal.ReadHelper.validateType(tag1.type, com.microsoft.bond.BondDataType.BT_LIST);
    
        if (tag1.size == 1) {
            if (this.Alternates == null) { this.Alternates = new java.util.ArrayList<String>(); }    com.microsoft.bond.ProtocolReader.ListTag tag2 = reader.readContainerBegin();
            this.Alternates.ensureCapacity(tag2.size);
        
            for (int i4 = 0; i4 < tag2.size; i4++) {
                String element3 = "";
                    element3 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag2.type);
                this.Alternates.add(element3);
            }
        
            reader.readContainerEnd();
        } else if (tag1.size != 0) {
            // throw new com.microsoft.bond.ProtocolException("Unexpected size for Nullable. Expecting size<=1, got size=" + tag1.size);
        }
    
    
        reader.readContainerEnd();
    } // readFieldImpl_Alternates


    /*
     * @see com.microsoft.bond.BondSerializable#marshal()
     */
    public void marshal(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.marshal(this, writer);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#write()
     */
    public void write(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        writer.writeBegin();
        com.microsoft.bond.ProtocolWriter firstPassWriter;
        if ((firstPassWriter = writer.getFirstPassWriter()) != null)
        {
            writeImpl(firstPassWriter, false);
            writeImpl(writer, false);
        }
        else
        {
          writeImpl(writer, false);
        }
        writer.writeEnd();
    }

    public void writeImpl(com.microsoft.bond.ProtocolWriter writer, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = writer.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);
        writer.writeStructBegin(Schema.metadata, isBase);
        

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 1, Schema.Name_metadata);
        writer.writeString(Name);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 2, Schema.Value_metadata);
        writer.writeString(Value);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_INT32, 3, Schema.Format_metadata);
        writer.writeInt32(Format.getValue());
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_MAP, 4, Schema.Annotations_metadata);
        writer.writeContainerBegin(Annotations.size(), com.microsoft.bond.BondDataType.BT_STRING, com.microsoft.bond.BondDataType.BT_STRING);
            for (java.util.Map.Entry<String, String> e1 : Annotations.entrySet()) {
                // Key
                writer.writeString(e1.getKey());
                // Value
                writer.writeString(e1.getValue());
            }
            writer.writeContainerEnd();
        writer.writeFieldEnd();

        int size2 = (Alternates != null) ? 1 : 0;
        if (!canOmitFields || (size2 != 0)) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_LIST, 5, Schema.Alternates_metadata);
            writer.writeContainerBegin(size2, com.microsoft.bond.BondDataType.BT_LIST);
            if (size2 != 0) {
                int size4 = Alternates.size();
                writer.writeContainerBegin(size4, com.microsoft.bond.BondDataType.BT_STRING);
                for (String item3 : Alternates) {
                    writer.writeString(item3);
                }
                writer.writeContainerEnd();
            }
            writer.writeContainerEnd();
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_LIST, 5, Schema.Alternates_metadata);
        }

        if (!canOmitFields || (LexicalForm != Schema.LexicalForm_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 6, Schema.LexicalForm_metadata);
            writer.writeString(LexicalForm);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 6, Schema.LexicalForm_metadata);
        }

        writer.writeStructEnd(isBase);
    } // writeImpl


    public boolean memberwiseCompare(Object obj) {
        if (obj == null) {
            return false;
        }

        SlotValue that = (SlotValue)obj;

        return memberwiseCompareQuick(that) && memberwiseCompareDeep(that);
    }

    protected boolean memberwiseCompareQuick(SlotValue that) {
        boolean equals = true;
        
        equals = equals && ((this.Name == null) == (that.Name == null));
        equals = equals && (this.Name == null ? true : (this.Name.length() == that.Name.length()));
        equals = equals && ((this.Value == null) == (that.Value == null));
        equals = equals && (this.Value == null ? true : (this.Value.length() == that.Value.length()));
        equals = equals && (this.Format == that.Format);
        equals = equals && ((this.Annotations == null) == (that.Annotations == null));
        equals = equals && ((this.Annotations == null) ? true : (this.Annotations.size() == that.Annotations.size()));
        equals = equals && ((this.Alternates == null) == (that.Alternates == null));
        equals = equals && ((this.LexicalForm == null) == (that.LexicalForm == null));
        equals = equals && (this.LexicalForm == null ? true : (this.LexicalForm.length() == that.LexicalForm.length()));
        return equals;
    } // memberwiseCompareQuick

    protected boolean memberwiseCompareDeep(SlotValue that) {
        boolean equals = true;
        
        equals = equals && (this.Name == null ? true : this.Name.equals(that.Name));
        equals = equals && (this.Value == null ? true : this.Value.equals(that.Value));
        if (equals && this.Annotations != null && this.Annotations.size() != 0)
        {
            for (java.util.Map.Entry<String, String> e3 : this.Annotations.entrySet()) {
                String val1 = e3.getValue();
                String val2 = that.Annotations.get(e3.getKey());
                equals = equals && that.Annotations.containsKey(e3.getKey());
                if (equals) {
                    equals = equals && ((val1 == null) == (val2 == null));
                    equals = equals && (val1 == null ? true : (val1.length() == val2.length()));
                    equals = equals && (val1 == null ? true : val1.equals(val2));
                }
                if (!equals) {
                    break;
                }
            }
        }
        if (equals && !(this.Alternates == null)) {
            equals = equals && ((this.Alternates == null) == (that.Alternates == null));
            equals = equals && ((this.Alternates == null) ? true : (this.Alternates.size() == that.Alternates.size()));
            if (equals && this.Alternates != null && this.Alternates.size() != 0) {
                for (int i4 = 0; i4 < this.Alternates.size(); ++i4) {
                    String val5 = this.Alternates.get(i4);
                    String val6 = that.Alternates.get(i4);
                    equals = equals && ((val5 == null) == (val6 == null));
                    equals = equals && (val5 == null ? true : (val5.length() == val6.length()));
                    equals = equals && (val5 == null ? true : val5.equals(val6));
                    if (!equals) {
                        break;
                    }
                }
            }
        }
        equals = equals && (this.LexicalForm == null ? true : this.LexicalForm.equals(that.LexicalForm));
        return equals;
    } // memberwiseCompareDeep

}; // class SlotValue
