
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.11.0.0
//   Input filename:  .\Durandal.Extensions.BondProtocol.API.ClientContext.bond
//   Output filename: Durandal.Extensions.BondProtocol.API.ClientContext_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Durandal.API
{
    using Durandal.Common.IO.Json;
    using Durandal.Common.NLP.Language;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    
    public class ClientContext
    {
        /// <summary>
        /// The unique ID of this client (usually a combination of authentication scheme + ID, such as "adhoc:11223344-aabb-ccdd")
        /// </summary>
        public string ClientId { get; set; }
        
        /// <summary>
        /// A set of flags representing core capabilities of this client. This describes things such as "has a screen" or "has speakers".
        /// More complicated capabilities would typically be expressed via ClientActions
        /// </summary>
        public ClientCapabilities Capabilities { get; set; }
        
        /// <summary>
        /// The language code of this client's user interface, in "xx-xx" form.
        /// </summary>
        [JsonConverter(typeof(JsonLanguageCodeConverter))]
        public LanguageCode Locale { get; set; }

        /// <summary>
        /// The unique ID of the user making the request (usually a combination of authentication scheme + ID, such as "openid:11223344-aabb-ccdd")
        /// </summary>
        public string UserId { get; set; }
        
        /// <summary>
        /// The internal name of this client, typically used to label it among a list of clients
        /// </summary>
        public string ClientName { get; set; }
        
        /// <summary>
        /// The current local wallclock time according to the client, in ISO (yyyy-MM-ddTHH:mm:ss) form
        /// </summary>
        public string ReferenceDateTime { get; set; }
        
        /// <summary>
        /// The client's current timezone + DST offset, expressed as minutes offset from UTC.
        /// </summary>
        public int? UTCOffset { get; set; }
        
        /// <summary>
        /// The client's current latitude in geocoordinates
        /// </summary>
        public double? Latitude { get; set; }
        
        /// <summary>
        /// The client's current longitude in geocoordinates
        /// </summary>
        public double? Longitude { get; set; }
        
        /// <summary>
        /// The client's location resolver (e.g. GPS) accuracy, expressed in meters
        /// </summary>
        public double? LocationAccuracy { get; set; }
        
        /// <summary>
        /// Extra optional context data the client may want to make available to skills
        /// </summary>
        public Dictionary<string, string> ExtraClientContext { get; set; }
        
        /// <summary>
        /// A listing of advanced client actions that this client can support using the client action handler
        /// </summary>
        public HashSet<string> SupportedClientActions { get; set; }
        
        /// <summary>
        /// The current IANA timezone of this user/client.
        /// </summary>
        public string UserTimeZone { get; set; }

        public ClientContext()
        {
            ClientId = "";
            Capabilities = 0;
            Locale = LanguageCode.UNDETERMINED;
            UserId = "0";
            ClientName = "";
            ExtraClientContext = new Dictionary<string, string>();
            SupportedClientActions = new HashSet<string>();
        }

        public ClientCapabilities GetCapabilities()
        {
            return (ClientCapabilities)this.Capabilities;
        }

        public void SetCapabilities(ClientCapabilities flags)
        {
            this.Capabilities = flags;
        }

        public void AddCapabilities(ClientCapabilities flagsToAdd)
        {
            this.Capabilities |= flagsToAdd;
        }

        public void RemoveCapabilities(ClientCapabilities flagsToRemove)
        {
            this.Capabilities &= ~(flagsToRemove);
        }
    }
} // Durandal.API
