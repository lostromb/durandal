using Durandal.Common.Net;
using System;
using System.Collections.Generic;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Win32.SafeHandles;
using Durandal.Common.Time;
using Durandal.Common.Utils;
using Durandal.Common.IO;
using Durandal.Common.Collections;
using Durandal.Common.ServiceMgmt;
using Durandal.Common.Tasks;

namespace Durandal.Common.Net
{
    /// <summary>
    /// Single-use socket implementation backed by system kernel anonymous pipes.
    /// This is the client side, meaning that it must connect to an already established pipe.
    /// The connection actually requires two pipes for full-duplex communication.
    /// As far as ownership of the native kernel handles, the server is ALWAYS assumed to
    /// manage lifetime of the pipe objects.
    /// </summary>
    public class AnonymousPipeClientSocket : ISocket
    {
        private static readonly SmallDictionary<SocketFeature, object> DEFAULT_FEATURES =
            new SmallDictionary<SocketFeature, object>(new Dictionary<SocketFeature, object>()
                { { SocketFeature.MemorySocket, null } });

        /// <summary>
        /// The scheme of the URI for connections over this protocol
        /// </summary>
        public static readonly string PROTOCOL_SCHEME = "pipe";

        private readonly string _originalRemoteEndpoint;
        private readonly AnonymousPipeClientStream _inPipe;
        private readonly AnonymousPipeClientStream _outPipe;
        private readonly StackBuffer _unreadBuffer = new StackBuffer();
        private int _disposed = 0;


        /// <summary>
        /// Creates a client connection to an existing anonymous pipe
        /// </summary>
        /// <param name="serverPipeEndpoint">The endpoint of the pipe to connect to, in the form "pipe:///?in=1234&amp;out=4567".
        /// This is generated by the <see cref="AnonymousPipeServerSocket.RemoteEndpointString">AnonymousPipeServerSocket.RemoteEndpointString</see> property</param>
        public AnonymousPipeClientSocket(string serverPipeEndpoint)
        {
            if (string.IsNullOrEmpty(serverPipeEndpoint))
            {
                throw new ArgumentNullException(nameof(serverPipeEndpoint));
            }

            Uri endpointUri;
            // Parse the endpoint string
            if (!Uri.TryCreate(serverPipeEndpoint, UriKind.Absolute, out endpointUri) ||
                !string.Equals(endpointUri.Scheme, PROTOCOL_SCHEME, StringComparison.OrdinalIgnoreCase))
            {
                throw new ArgumentException("Anonymous pipe endpoint must be a URI in the form pipe:///?in=123&out=456");
            }
            
            _originalRemoteEndpoint = serverPipeEndpoint;
            string inOutPairString = endpointUri.Query.TrimStart('?');
            string[] protocolParts = inOutPairString.Split('&');

            if (protocolParts.Length < 2)
            {
                throw new ArgumentException("Protocol parts are invalid; expected something like in=1234&out=4567 but got " + inOutPairString);
            }

            foreach (string protocolPart in protocolParts)
            {
                // note that we have to crossover in and out because those are defined relative to the server, not the client
#pragma warning disable CA2000 // Dispose objects before losing scope (SafePipeHandle)
                if (protocolPart.StartsWith("in="))
                {
                    long handleId = long.Parse(protocolPart.Substring("in=".Length));
                    _outPipe = new AnonymousPipeClientStream(PipeDirection.Out, new SafePipeHandle(new IntPtr(handleId), false));
                }
                else if (protocolPart.StartsWith("out="))
                {
                    long handleId = long.Parse(protocolPart.Substring("out=".Length));
                    _inPipe = new AnonymousPipeClientStream(PipeDirection.In, new SafePipeHandle(new IntPtr(handleId), false));
                }
#pragma warning restore CA2000 // Dispose objects before losing scope
            }

            if (_outPipe == null)
            {
                throw new ArgumentException("No in= pipe was specified in protocol string");
            }
            if (_inPipe == null)
            {
                throw new ArgumentException("No out= pipe was specified in protocol string");
            }

            DebugMemoryLeakTracer.TraceDisposableItemCreated(this);
        }

#if TRACK_IDISPOSABLE_LEAKS
        ~AnonymousPipeClientSocket()
        {
            Dispose(false);
        }
#endif

        public int ReceiveTimeout
        {
            get
            {
                return _inPipe.ReadTimeout;
            }

            set
            {
                //_inPipe.ReadTimeout = value;
            }
        }

        public string RemoteEndpointString
        {
            get
            {
                return _originalRemoteEndpoint;
            }
        }

        public IReadOnlyDictionary<SocketFeature, object> Features => DEFAULT_FEATURES;

        public Task Disconnect(CancellationToken cancelToken, IRealTimeProvider waitProvider, NetworkDuplex which = NetworkDuplex.ReadWrite, bool allowLinger = false)
        {
            return DurandalTaskExtensions.NoOpTask;
        }

        public Task FlushAsync(CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            // Flush doesn't actually do anything for anonymous pipes...
            return _outPipe.FlushAsync(cancelToken);
        }

        public Task<int> ReadAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            int unreadBytes = _unreadBuffer.Read(data, offset, count);
            if (unreadBytes == count)
            {
                return Task.FromResult<int>(count);
            }

            return SocketHelpers.ReliableRead(this, data, offset + unreadBytes, count - unreadBytes, cancelToken, realTime);
        }

        public Task<int> ReadAnyAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            // First, try to read from the unread buffer
            int unreadBytes = _unreadBuffer.Read(data, offset, count);
            if (unreadBytes > 0)
            {
                // If we have just some data from the unread buffer, return it as a partial read because a read from the actual socket may block.
                return Task.FromResult<int>(unreadBytes);
            }

            return _inPipe.ReadAsync(data, offset, count, cancelToken);
        }

        public Task WriteAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            return _outPipe.WriteAsync(data, offset, count, cancelToken);

            // Since pipe buffers are small, break up the write into tiny pieces
            //int sent = 0;
            //while (sent < count)
            //{
            //    int thisPacketSize = Math.Min(4096, count - sent);
            //    await _outPipe.WriteAsync(data, sent + offset, thisPacketSize, cancelToken);
            //    sent += thisPacketSize;
            //}
        }

        public void Unread(byte[] buffer, int offset, int count)
        {
            _unreadBuffer.Write(buffer, offset, count);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!AtomicOperations.ExecuteOnce(ref _disposed))
            {
                return;
            }

            DebugMemoryLeakTracer.TraceDisposableItemDisposed(this, disposing);

            if (disposing)
            {
                _inPipe.Dispose();
                _outPipe.Dispose();
                _unreadBuffer.Dispose();
            }
        }
    }
}
