[Engine:statistical]
[Locales:en-us]

[Phrase:LocalTime]
Text=It is now [time]1:00 PM[/time].
Spoken=It is now [time]1:00 PM[/time].
Transformer-time=DateTimeFormat("h:mm tt")
[Phrase:LocalTime]
Text=The time is [time]1:00 PM[/time].
Spoken=The time is [time]1:00 PM[/time].
Transformer-time=DateTimeFormat("h:mm tt")
[Phrase:LocalTime]
Text=The current time is [time]1:00 PM[/time].
Spoken=The current time is [time]1:00 PM[/time].
Transformer-time=DateTimeFormat("h:mm tt")
[Phrase:LocalTime]
Text=The clock says [time]1:00 PM[/time].
Spoken=The clock says is [time]1:00 PM[/time].
Transformer-time=DateTimeFormat("h:mm tt")

[Phrase:LocalTimeUnsure]
Text=The best I can tell you is that the UTC time is [time]1:00 PM[/time].
Spoken=The best I can tell you is that the UTC time is [time]1:00 PM[/time].
Transformer-time=DateTimeFormat("h:mm tt")

[Phrase:LocalDate]
TextModel=LocalDate
SpokenModel=LocalDate
Transformer-date=DateTimeFormat("dddd, MMMM d")
[Model:LocalDate]
Today is [date]Thursday, January 1[/date]st.
Today is [date]Thursday, January 2[/date]nd.
Today is [date]Thursday, January 3[/date]rd.
Today is [date]Thursday, January 4[/date]th.
Today is [date]Thursday, January 5[/date]th.
Today is [date]Thursday, January 6[/date]th.
Today is [date]Thursday, January 11[/date]th.
Today is [date]Thursday, January 12[/date]th.
Today is [date]Thursday, January 21[/date]st.
Today is [date]Thursday, January 22[/date]nd.
Today is [date]Thursday, January 23[/date]rd.



[Phrase:WorldTime]
TextModel=WorldTime
SpokenModel=WorldTime
Transformer-location=Capitalize
Script=HandleWorldTimeOffset
[Model:WorldTime]
In [location]Toronto[/location] it is now [time_string]1:00 PM[/time_string].

[Script:HandleWorldTimeOffset]
if (!Substitutions.ContainsKey("world_time") || !(Substitutions["world_time"] is DateTimeOffset))
{
	Substitutions["time_string"] = "NO_WORLD_TIME";
	return;
}

if (!Substitutions.ContainsKey("local_time") || !(Substitutions["local_time"] is DateTimeOffset))
{
	Substitutions["time_string"] = "NO_LOCAL_TIME";
	return;
}

DateTimeOffset remoteTime = (DateTimeOffset)Substitutions["world_time"];
DateTimeOffset localTime = (DateTimeOffset)Substitutions["local_time"];
string outputString = remoteTime.ToString("h:mm tt");

if (localTime.DayOfYear != remoteTime.DayOfYear)
{
	if (localTime.Offset > remoteTime.Offset)
	{
		outputString += " yesterday";
	}
	else
	{
		outputString += " tomorrow";
	}
}

Substitutions["time_string"] = outputString;

[Phrase:LocalDateUnsure]
TextModel=LocalDateUnsure
SpokenModel=LocalDateUnsure
Transformer-date=DateTimeFormat("dddd, MMMM d")
[Model:LocalDateUnsure]
I'm not sure about you, but my calendar says today is [date]Thursday, January 1[/date]st.
I'm not sure about you, but my calendar says today is [date]Thursday, January 2[/date]nd.
I'm not sure about you, but my calendar says today is [date]Thursday, January 3[/date]rd.
I'm not sure about you, but my calendar says today is [date]Thursday, January 4[/date]th.
I'm not sure about you, but my calendar says today is [date]Thursday, January 5[/date]th.
I'm not sure about you, but my calendar says today is [date]Thursday, January 6[/date]th.
I'm not sure about you, but my calendar says today is [date]Thursday, January 11[/date]th.
I'm not sure about you, but my calendar says today is [date]Thursday, January 12[/date]th.
I'm not sure about you, but my calendar says today is [date]Thursday, January 21[/date]st.
I'm not sure about you, but my calendar says today is [date]Thursday, January 22[/date]nd.
I'm not sure about you, but my calendar says today is [date]Thursday, January 23[/date]rd.

[Phrase:RelativeDate]
Text=[query]Christmas[/query] is on [date]Friday, December 25[/date].
Transformer-query=Capitalize
Transformer-date=DateTimeFormat("dddd, MMMM d")
[Phrase:RelativeDayOfWeek]
Text=[query]Christmas[/query] is on a [day_of_week]Tuesday[/day_of_week].
Transformer-query=Capitalize
Transformer-day_of_week=DateTimeFormat("dddd")
[Phrase:RelativeDayOfWeek]
Text=[query]Christmas[/query] falls on a [day_of_week]Tuesday[/day_of_week].
Transformer-query=Capitalize
Transformer-day_of_week=DateTimeFormat("dddd")
[Phrase:RelativeDayOfMonth]
TextModel=RelativeDayOfMonth
Transformer-query=Capitalize
Transformer-day_of_month=DateTimeFormat("dd")
[Model:RelativeDayOfMonth]
[query]Christmas[/query] is on the [day_of_month]1[/day_of_month]st.
[query]Christmas[/query] is on the [day_of_month]2[/day_of_month]nd.
[query]Christmas[/query] is on the [day_of_month]3[/day_of_month]rd.
[query]Christmas[/query] is on the [day_of_month]4[/day_of_month]th.
[query]Christmas[/query] is on the [day_of_month]5[/day_of_month]th.
[query]Christmas[/query] is on the [day_of_month]10[/day_of_month]th.
[query]Christmas[/query] is on the [day_of_month]12[/day_of_month]th.
[query]Christmas[/query] is on the [day_of_month]21[/day_of_month]st.
[query]Christmas[/query] is on the [day_of_month]22[/day_of_month]nd.



[Phrase:DontKnowWorldTime]
Text=Sorry, I don't know what time is it in [location]Timbuktu[/location]


[Phrase:DaylightSavings]
Script=DecideDstOffsetPhrase
Text=[error_message][/error_message]

[Phrase:DaylightSavingsNotFound]
Text=There is no daylight savings time in your area.

[Script:DecideDstOffsetPhrase]
if (!Substitutions.ContainsKey("local_time") || !(Substitutions["local_time"] is DateTimeOffset))
{
	Substitutions["error_message"] = "NO_LOCAL_TIME";
	return;
}

if (!Substitutions.ContainsKey("dst_change_time") || !(Substitutions["dst_change_time"] is DateTimeOffset))
{
	Substitutions["error_message"] = "NO_DST_CHANGE_TIME";
	return;
}

DateTimeOffset localTime = (DateTimeOffset)Substitutions["local_time"];
DateTimeOffset dstChangeTime = (DateTimeOffset)Substitutions["dst_change_time"];
TimeSpan duration = (dstChangeTime - localTime).Duration();
if (duration.TotalHours < 24)
	PhraseName = "DaylightSavingsToday";
else if (duration.TotalDays < 7)
	PhraseName = "DaylightSavingsThisWeek";
else
	PhraseName = "DaylightSavingsFar";

[Phrase:DaylightSavingsToday]
Text=At [dst_change_time]2:00 AM[/dst_change_time] the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
Script=RenderDstOffset
Transformer-dst_change_time=DateTimeFormat("h:mm tt")

[Phrase:DaylightSavingsThisWeek]
Text=On [dst_change_time]Thursday at 2:00 AM[/dst_change_time] the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
Script=RenderDstOffset
Transformer-dst_change_time=DateTimeFormat("dddd 'at' h:mm tt")

[Phrase:DaylightSavingsFar]
TextModel=DaylightSavingsFar
Script=RenderDstOffset
Transformer-dst_change_time=DateTimeFormat("MMMM d")
[Model:DaylightSavingsFar]
On [dst_change_time]January 1[/dst_change_time]st the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 2[/dst_change_time]nd the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 3[/dst_change_time]rd the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 4[/dst_change_time]th the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 5[/dst_change_time]th the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 6[/dst_change_time]th the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 11[/dst_change_time]th the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 12[/dst_change_time]th the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 21[/dst_change_time]st the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 22[/dst_change_time]nd the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].
On [dst_change_time]January 23[/dst_change_time]rd the clock will skip [direction]forwards[/direction] [offset_phrase]1 hour[/offset_phrase].

[Script:RenderDstOffset]
if (!Substitutions.ContainsKey("offset") || !(Substitutions["offset"] is TimeSpan))
{
	Substitutions["offset_phrase"] = "NO_OFFSET";
	return;
}

TimeSpan offset = (TimeSpan)Substitutions["offset"];
string outputString = "";
int hours = Math.Abs(offset.Hours);
int minutes = Math.Abs(offset.Minutes);
if (hours == 1)
	outputString = "1 hour";
else if (hours > 1)
	outputString = hours.ToString() + " hours";

if (minutes != 0)
{
	if (!string.IsNullOrEmpty(outputString))
		outputString += " and ";
	if (minutes == 1)
		outputString = "1 minute";
	else if (minutes > 1)
		outputString = minutes.ToString() + " minutes";
}

Substitutions["offset_phrase"] = outputString;
Substitutions["direction"] = offset.Ticks > 0 ? "forwards" : "backwards";

[Phrase:WorldTimeDifference]
TextModel=WorldTimeDifference
Script=WorldTimeDifference

[Model:WorldTimeDifference]
If it were [basis_time]1:00 AM[/basis_time] in [basis_location]Seattle[/basis_location] it would be [query_time]11:00 PM[/query_time] in [query_location]Hong Kong[/query_location].
If it were [basis_time]4:05 PM[/basis_time] in [basis_location]Chicago[/basis_location] it would be [query_time]12:05 PM[/query_time] in [query_location]Tokyo[/query_location].
If it were [basis_time]8:00 AM[/basis_time] in [basis_location]Toronto[/basis_location] it would be [query_time]5:00 AM[/query_time] in [query_location]Seoul[/query_location].
If it were [basis_time]6:00 PM[/basis_time] in [basis_location]Mogadishu[/basis_location] it would be [query_time]11:00 AM[/query_time] in [query_location]Salt Lake City[/query_location].
If it were [basis_time]10:35 AM[/basis_time] in [basis_location]Tokyo[/basis_location] it would be [query_time]9:35 PM[/query_time] in [query_location]Johannesburg[/query_location].
If it were [basis_time]5:00 PM[/basis_time] in [basis_location]Budapest[/basis_location] it would be [query_time]11:00 PM[/query_time] in [query_location]Vasa[/query_location].
If it were [basis_time]6:30 AM[/basis_time] in [basis_location]Amsterdam[/basis_location] it would be [query_time]11:30 PM[/query_time] in [query_location]Paris[/query_location].
If it were [basis_time]8:00 PM[/basis_time] in [basis_location]Accra[/basis_location] it would be [query_time]5:00 PM[/query_time] in [query_location]Warsaw[/query_location].
If it were [basis_time]4:20 AM[/basis_time] in [basis_location]Auckland[/basis_location] it would be [query_time]11:20 AM[/query_time] in [query_location]Los Angeles[/query_location].
If it were [basis_time]1:00 PM[/basis_time] in [basis_location]Taipei[/basis_location] it would be [query_time]5:00 PM[/query_time] in [query_location]New York[/query_location].
If it were [basis_time]3:15 AM[/basis_time] at [basis_location]your current location[/basis_location] it would be [query_time]11:15 AM[/query_time] in [query_location]Cape Town[/query_location].
If it were [basis_time]8:45 PM[/basis_time] at [basis_location]your current location[/basis_location] it would be [query_time]11:45 PM[/query_time] in [query_location]Gibraltar[/query_location].
If it were [basis_time]11:45 AM[/basis_time] at [basis_location]your current location[/basis_location] it would be [query_time]11:00 AM[/query_time] in [query_location]Venice[/query_location].
If it were [basis_time]12:00 PM[/basis_time] at [basis_location]your current location[/basis_location] it would be [query_time]11:00 PM[/query_time] in [query_location]Dubai[/query_location].
If it were [basis_time]5:00 AM[/basis_time] at [basis_location]your current location[/basis_location] it would be [query_time]11:00 AM[/query_time] in [query_location]Suzhou[/query_location].
If it were [basis_time]4:00 PM[/basis_time] in [basis_location]Maputo[/basis_location] it would be [query_time]5:00 AM[/query_time] at [query_location]your current location[/query_location].
If it were [basis_time]7:00 AM[/basis_time] in [basis_location]Mexico City[/basis_location] it would be [query_time]12:00 PM[/query_time] at [query_location]your current location[/query_location].
If it were [basis_time]9:00 PM[/basis_time] in [basis_location]London[/basis_location] it would be [query_time]4:00 AM[/query_time] at [query_location]your current location[/query_location].
If it were [basis_time]10:00 AM[/basis_time] in [basis_location]Bremen[/basis_location] it would be [query_time]9:00 PM[/query_time] at [query_location]your current location[/query_location].
If it were [basis_time]5:15 PM[/basis_time] in [basis_location]Vladivostok[/basis_location] it would be [query_time]11:15 AM[/query_time] at [query_location]your current location[/query_location].

[Script:WorldTimeDifference]
if (!Substitutions.ContainsKey("basis_location") || !(Substitutions["basis_location"] is string))
{
	Substitutions["basis_location"] = "NO_BASIS_LOCATION";
	return;
}
if (!Substitutions.ContainsKey("query_location") || !(Substitutions["query_location"] is string))
{
	Substitutions["query_location"] = "NO_QUERY_LOCATION";
	return;
}
if (!Substitutions.ContainsKey("basis_time") || !(Substitutions["basis_time"] is DateTimeOffset))
{
	Substitutions["basis_time"] = "NO_BASIS_TIME";
	return;
}
if (!Substitutions.ContainsKey("query_time") || !(Substitutions["query_time"] is DateTimeOffset))
{
	Substitutions["query_time"] = "NO_QUERY_TIME";
	return;
}

if (string.Equals(Substitutions["basis_location"], "CURRENT_LOCATION"))
{
	Substitutions["basis_location"] = "your current location";
}
if (string.Equals(Substitutions["query_location"], "CURRENT_LOCATION"))
{
	Substitutions["query_location"] = "your current location";
}

DateTimeOffset basisTime = (DateTimeOffset)Substitutions["basis_time"];
DateTimeOffset queryTime = (DateTimeOffset)Substitutions["query_time"];
Log("Basis time is " + basisTime.ToString());
Log("Query time is " + queryTime.ToString());
if (basisTime.DayOfYear != queryTime.DayOfYear)
{
	Log("Day is different");
	string queryTimeString = queryTime.ToString("h:mm tt");
	if (queryTime.Offset > basisTime.Offset)
	{
		queryTimeString += " the next day";
		Log("Next day case");
	}
	else
	{
		queryTimeString += " the previous day";
		Log("Previous day case");
	}
	
	Substitutions["query_time"] = queryTimeString;
}
else
{
	Log("Day is the same");
	Substitutions["query_time"] = queryTime.ToString("h:mm tt");
}

Substitutions["basis_time"] = basisTime.ToString("h:mm tt");

[Phrase:TimerStarted]
Text=Timer started.
[Phrase:TimerNotStarted]
Text=Timer has not been started.
