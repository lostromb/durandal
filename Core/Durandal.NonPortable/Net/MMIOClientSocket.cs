using Durandal.Common.Net;
using System;
using System.Collections.Generic;
using System.IO.Pipes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using Microsoft.Win32.SafeHandles;
using Durandal.Common.Time;
using Durandal.Common.Tasks;
using Durandal.Common.Logger;
using Durandal.Common.Instrumentation;
using Durandal.Common.Utils;
using Durandal.Common.IO;
using Durandal.Common.Collections;
using System.Runtime.Versioning;
using Durandal.Common.ServiceMgmt;

namespace Durandal.Common.Net
{
    /// <summary>
    /// Single-use socket implementation backed by system memory-mapped IO.
    /// This is the client side, meaning that it must connect to an already established memory-mapped file.
    /// The connection actually requires two pipes for full-duplex communication.
    /// As far as ownership of the native kernel handles, the server is ALWAYS assumed to
    /// manage lifetime of the pipe objects.
    /// </summary>
    public class MMIOClientSocket : ISocket
    {
        private static readonly SmallDictionary<SocketFeature, object> DEFAULT_FEATURES =
            new SmallDictionary<SocketFeature, object>(new Dictionary<SocketFeature, object>()
                { { SocketFeature.MemorySocket, null } });

        /// <summary>
        /// The scheme of the URI for connections over this protocol
        /// </summary>
        public static readonly string PROTOCOL_SCHEME = "mmio";

        private readonly string _originalRemoteEndpoint;
        private readonly MemoryMappedFileStream _inStream;
        private readonly MemoryMappedFileStream _outStream;
        private readonly StackBuffer _unreadBuffer = new StackBuffer();
        private int _disposed = 0;

        /// <summary>
        /// Creates a client connection to an existing memory-mapped file
        /// </summary>
        /// <param name="serverMmioEndpoint">The endpoint of the pipe to connect to, in the form "mmio:///?in=abc&amp;out=xyz".
        /// This is generated by the <see cref="MMIOServerSocket.RemoteEndpointString">MMIOServerSocket.RemoteEndpointString</see> property</param>
        /// <param name="logger">A logger</param>
        /// <param name="metrics">A metric collector</param>
        /// <param name="metricDimensions">Dimensions to use for the metrics</param>
#if NETCOREAPP
        [SupportedOSPlatform("windows")]
#endif
        public MMIOClientSocket(string serverMmioEndpoint, ILogger logger, IMetricCollector metrics, DimensionSet metricDimensions)
        {
            if (string.IsNullOrEmpty(serverMmioEndpoint))
            {
                throw new ArgumentNullException(nameof(serverMmioEndpoint));
            }

            Uri endpointUri;
            // Parse the endpoint string
            if (!Uri.TryCreate(serverMmioEndpoint, UriKind.Absolute, out endpointUri) ||
                !string.Equals(endpointUri.Scheme, PROTOCOL_SCHEME, StringComparison.OrdinalIgnoreCase))
            {
                throw new ArgumentException("MMIO endpoint must be a URI in the form mmio:///?in=abc&out=xyz");
            }
            
            _originalRemoteEndpoint = serverMmioEndpoint;
            string inOutPairString = endpointUri.Query.TrimStart('?');
            string[] protocolParts = inOutPairString.Split('&');

            if (protocolParts.Length < 2)
            {
                throw new ArgumentException("Protocol parts are invalid; expected something like in=abc&out=xyz but got " + inOutPairString);
            }
            
            foreach (string protocolPart in protocolParts)
            {
                // note that we have to crossover in and out because those are defined relative to the server, not the client
                if (protocolPart.StartsWith("in="))
                {
                    string fileName = protocolPart.Substring("in=".Length);
                    _outStream = new MemoryMappedFileStream(fileName, logger, metrics, metricDimensions, false);
                }
                else if (protocolPart.StartsWith("out="))
                {
                    string fileName = protocolPart.Substring("out=".Length);
                    _inStream = new MemoryMappedFileStream(fileName, logger, metrics, metricDimensions, true);
                }
            }

            if (_outStream == null)
            {
                throw new ArgumentException("No in= file was specified in protocol string");
            }
            if (_inStream == null)
            {
                throw new ArgumentException("No out= file was specified in protocol string");
            }

            DebugMemoryLeakTracer.TraceDisposableItemCreated(this);
        }


#if TRACK_IDISPOSABLE_LEAKS
        ~MMIOClientSocket()
        {
            Dispose(false);
        }
#endif

        public int ReceiveTimeout
        {
            get
            {
                return _inStream.ReadTimeout;
            }

            set
            {
                _inStream.ReadTimeout = value;
            }
        }

        public string RemoteEndpointString
        {
            get
            {
                return _originalRemoteEndpoint;
            }
        }

        public IReadOnlyDictionary<SocketFeature, object> Features => DEFAULT_FEATURES;

        public Task Disconnect(CancellationToken cancelToken, IRealTimeProvider waitProvider, NetworkDuplex which = NetworkDuplex.ReadWrite, bool allowLinger = false)
        {
            return DurandalTaskExtensions.NoOpTask;
        }

        public Task FlushAsync(CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            // Flush does nothing since we write directly to memory
            return DurandalTaskExtensions.NoOpTask;
        }

        public Task<int> ReadAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            return _inStream.ReadAsync(data, offset, count, cancelToken, realTime);
        }

        public Task<int> ReadAnyAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            // First, try to read from the unread buffer
            int unreadBytes = _unreadBuffer.Read(data, offset, count);
            if (unreadBytes > 0)
            {
                // If we have just some data from the unread buffer, return it as a partial read because a read from the actual socket may block.
                return Task.FromResult<int>(unreadBytes);
            }

            return _inStream.ReadAnyAsync(data, offset, count, cancelToken, realTime);
        }

        public Task WriteAsync(byte[] data, int offset, int count, CancellationToken cancelToken, IRealTimeProvider realTime)
        {
            return _outStream.WriteAsync(data, offset, count, cancelToken);
        }

        public void Unread(byte[] buffer, int offset, int count)
        {
            _unreadBuffer.Write(buffer, offset, count);
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!AtomicOperations.ExecuteOnce(ref _disposed))
            {
                return;
            }

            DebugMemoryLeakTracer.TraceDisposableItemDisposed(this, disposing);

            if (disposing)
            {
                _inStream.Dispose();
                _outStream.Dispose();
                _unreadBuffer.Dispose();
            }
        }
    }
}
