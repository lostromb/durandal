



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.retail.not
//     Template : Microsoft.Bond.Rules.dll#Java.tt
//     File     : org\stromberg\durandal\api\Sentence.java
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
package org.stromberg.durandal.api;


/**
* Sentence
*/
@SuppressWarnings("all")
public class Sentence implements com.microsoft.bond.BondSerializable, com.microsoft.bond.BondMirror {
    // TODO: implement
    public com.microsoft.bond.BondSerializable clone() {return null;}

    //
    // Fields
    //

    // 1: Required string OriginalText
    private String OriginalText;

    // 2: Required vector<string> Words
    private java.util.ArrayList<String> Words;

    // 3: Required vector<int32> Indices
    private java.util.ArrayList<Integer> Indices;

    // 4: Optional string LexicalForm
    private String LexicalForm;

    /**
     * @return current value of OriginalText property
     */
    public final String getOriginalText() {
        return this.OriginalText;
    }

    /**
     * @param value new value of OriginalText property
     */
    public final void setOriginalText(String value) {
        this.OriginalText = value;
    }

    /**
     * @return current value of Words property
     */
    public final java.util.ArrayList<String> getWords() {
        return this.Words;
    }

    /**
     * @param value new value of Words property
     */
    public final void setWords(java.util.ArrayList<String> value) {
        this.Words = value;
    }

    /**
     * @return current value of Indices property
     */
    public final java.util.ArrayList<Integer> getIndices() {
        return this.Indices;
    }

    /**
     * @param value new value of Indices property
     */
    public final void setIndices(java.util.ArrayList<Integer> value) {
        this.Indices = value;
    }

    /**
     * @return current value of LexicalForm property
     */
    public final String getLexicalForm() {
        return this.LexicalForm;
    }

    /**
     * @param value new value of LexicalForm property
     */
    public final void setLexicalForm(String value) {
        this.LexicalForm = value;
    }

    /**
     * Schema metadata
     */
    public static class Schema {
        public static final com.microsoft.bond.SchemaDef schemaDef;
        public static final com.microsoft.bond.Metadata metadata;
        private static final com.microsoft.bond.Metadata OriginalText_metadata;
        private static final com.microsoft.bond.Metadata Words_metadata;
        private static final com.microsoft.bond.Metadata Indices_metadata;
        private static final com.microsoft.bond.Metadata LexicalForm_metadata;

        static {
            metadata = new com.microsoft.bond.Metadata();
            metadata.setName("Sentence");
            metadata.setQualified_name("org.stromberg.durandal.api.Sentence");


            // OriginalText
            OriginalText_metadata = new com.microsoft.bond.Metadata();
            OriginalText_metadata.setName("OriginalText");
            OriginalText_metadata.setModifier(com.microsoft.bond.Modifier.Required);
            OriginalText_metadata.getDefault_value().setString_value("");

            // Words
            Words_metadata = new com.microsoft.bond.Metadata();
            Words_metadata.setName("Words");
            Words_metadata.setModifier(com.microsoft.bond.Modifier.Required);

            // Indices
            Indices_metadata = new com.microsoft.bond.Metadata();
            Indices_metadata.setName("Indices");
            Indices_metadata.setModifier(com.microsoft.bond.Modifier.Required);

            // LexicalForm
            LexicalForm_metadata = new com.microsoft.bond.Metadata();
            LexicalForm_metadata.setName("LexicalForm");
            LexicalForm_metadata.getDefault_value().setString_value("");

            schemaDef = new com.microsoft.bond.SchemaDef();
            schemaDef.setRoot(getTypeDef(schemaDef));
        }

        public static com.microsoft.bond.TypeDef getTypeDef(com.microsoft.bond.SchemaDef schema)
        {
            com.microsoft.bond.TypeDef type = new com.microsoft.bond.TypeDef();
            type.setId(com.microsoft.bond.BondDataType.BT_STRUCT);
            type.setStruct_def(getStructDef(schema));
            return type;
        }

        private static short getStructDef(com.microsoft.bond.SchemaDef schema)
        {
            short pos;

            for(pos = 0; pos < schema.getStructs().size(); pos++)
            {
                if (schema.getStructs().get(pos).getMetadata() == metadata)
                {
                    return pos;
                }
            }

            com.microsoft.bond.StructDef structDef = new com.microsoft.bond.StructDef();
            schema.getStructs().add(structDef);

            structDef.setMetadata(metadata);

            com.microsoft.bond.FieldDef field;

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)1);
            field.setMetadata(OriginalText_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)2);
            field.setMetadata(Words_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_LIST);
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getElement().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)3);
            field.setMetadata(Indices_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_LIST);
            field.getType().setElement(new com.microsoft.bond.TypeDef());
            field.getType().getElement().setId(com.microsoft.bond.BondDataType.BT_INT32);
            structDef.getFields().add(field);

            field = new com.microsoft.bond.FieldDef();
            field.setId((short)4);
            field.setMetadata(LexicalForm_metadata);
            field.getType().setId(com.microsoft.bond.BondDataType.BT_STRING);
            structDef.getFields().add(field);

            return pos;
        }
    }

    /*
    * @see com.microsoft.bond.BondMirror#getField()
    */
    public Object getField(com.microsoft.bond.FieldDef fieldDef) {
        switch (fieldDef.getId()) {
            case (short)1:
                return this.OriginalText;
            case (short)2:
                return this.Words;
            case (short)3:
                return this.Indices;
            case (short)4:
                return this.LexicalForm;
            default:
                return null;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#setField()
    */
    public void setField(com.microsoft.bond.FieldDef fieldDef, Object value) {
        switch (fieldDef.getId()) {
            case (short)1:
                this.OriginalText = (String)value;
                break;
            case (short)2:
                this.Words = (java.util.ArrayList<String>)value;
                break;
            case (short)3:
                this.Indices = (java.util.ArrayList<Integer>)value;
                break;
            case (short)4:
                this.LexicalForm = (String)value;
                break;
        }
    }


    /*
    * @see com.microsoft.bond.BondMirror#createInstance()
    */
    public com.microsoft.bond.BondMirror createInstance(com.microsoft.bond.StructDef structDef) {
        return null;
    }

    /*
     * @see com.microsoft.bond.BondMirror#getSchema()
     */
    public com.microsoft.bond.SchemaDef getSchema()
    {
        return getRuntimeSchema();
    }

    /**
     * Static method returning {@link SchemaDef} instance.
     */
    public static com.microsoft.bond.SchemaDef getRuntimeSchema()
    {
        return Schema.schemaDef;
    }

    // Constructor
    public Sentence() {
        reset();
    }

    /*
     * @see com.microsoft.bond.BondSerializable#reset()
     */
    public void reset() {
        reset("Sentence", "org.stromberg.durandal.api.Sentence");
    }

    protected void reset(String name, String qualifiedName) {
        
        OriginalText = "";
        if (Words == null) {
            Words = new java.util.ArrayList<String>();
        } else {
            Words.clear();
        }
        if (Indices == null) {
            Indices = new java.util.ArrayList<Integer>();
        } else {
            Indices.clear();
        }
        LexicalForm = "";
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#unmarshal()
     */
    public void unmarshal(java.io.InputStream input, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.unmarshal(input, (com.microsoft.bond.SchemaDef)schema, this);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        reader.readBegin();
        readImpl(reader);
        reader.readEnd();
    }

    /*
     * Called to read a struct that is contained inside another struct.
     */
    public void readImpl(com.microsoft.bond.ProtocolReader reader) throws java.io.IOException {
        if (!reader.hasCapability(com.microsoft.bond.ProtocolCapability.TAGGED)) {
            readUntagged(reader, false);
        } else if (readTagged(reader, false)) {
            com.microsoft.bond.internal.ReadHelper.skipPartialStruct(reader);
        }
    }

    /*
     * @see com.microsoft.bond.BondSerializable#read()
     */
    public void read(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondSerializable schema) throws java.io.IOException {
        // read(com.microsoft.bond.internal.ProtocolHelper.createReader(reader, schema));
    }

    protected void readUntagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = reader.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);

        reader.readStructBegin(isBase);
        

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.OriginalText = reader.readString();
        }
        else
        {
            // throw new BondException("Missing required field \"OriginalText\", id=1");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_Words(reader, com.microsoft.bond.BondDataType.BT_LIST);
        }
        else
        {
            // throw new BondException("Missing required field \"Words\", id=2");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.readFieldImpl_Indices(reader, com.microsoft.bond.BondDataType.BT_LIST);
        }
        else
        {
            // throw new BondException("Missing required field \"Indices\", id=3");
        }

        if (!canOmitFields || !reader.readFieldOmitted()) {
            this.LexicalForm = reader.readString();
        }
        reader.readStructEnd();
    } // ReadUntagged()


    protected boolean readTagged(com.microsoft.bond.ProtocolReader reader, boolean isBase) throws java.io.IOException {
        boolean isPartial;
        reader.readStructBegin(isBase);

        // BitArray seenRequiredFields = new BitArray(4);

        while (true) {
            com.microsoft.bond.ProtocolReader.FieldTag fieldTag = reader.readFieldBegin();

            if (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP
             || fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE) {
                isPartial = (fieldTag.type == com.microsoft.bond.BondDataType.BT_STOP_BASE);
                break;
            }

            switch (fieldTag.id) {
                case 1:
                    this.OriginalText = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    // seenRequiredFields.Set(1, true);
                    break;
                case 2:
                    this.readFieldImpl_Words(reader, fieldTag.type);
                    // seenRequiredFields.Set(2, true);
                    break;
                case 3:
                    this.readFieldImpl_Indices(reader, fieldTag.type);
                    // seenRequiredFields.Set(3, true);
                    break;
                case 4:
                    this.LexicalForm = com.microsoft.bond.internal.ReadHelper.readString(reader, fieldTag.type);
                    break;
                default:
                    reader.skip(fieldTag.type);
                    break;
            }

            reader.readFieldEnd();
        }

        reader.readStructEnd();

        //checkRequiredFieldsAreSeen(seenRequiredFields);
        return isPartial;
    }


    private void readFieldImpl_Words(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_LIST);
        com.microsoft.bond.ProtocolReader.ListTag tag1 = reader.readContainerBegin();
        this.Words.ensureCapacity(tag1.size);
    
        for (int i3 = 0; i3 < tag1.size; i3++) {
            String element2 = "";
                element2 = com.microsoft.bond.internal.ReadHelper.readString(reader, tag1.type);
            this.Words.add(element2);
        }
    
        reader.readContainerEnd();
    } // readFieldImpl_Words


    private void readFieldImpl_Indices(com.microsoft.bond.ProtocolReader reader, com.microsoft.bond.BondDataType typeInPayload) throws java.io.IOException {
        com.microsoft.bond.internal.ReadHelper.validateType(typeInPayload, com.microsoft.bond.BondDataType.BT_LIST);
        com.microsoft.bond.ProtocolReader.ListTag tag1 = reader.readContainerBegin();
        this.Indices.ensureCapacity(tag1.size);
    
        for (int i3 = 0; i3 < tag1.size; i3++) {
            int element2 = 0;
                element2 = com.microsoft.bond.internal.ReadHelper.readInt32(reader, tag1.type);
            this.Indices.add(element2);
        }
    
        reader.readContainerEnd();
    } // readFieldImpl_Indices


    /*
     * @see com.microsoft.bond.BondSerializable#marshal()
     */
    public void marshal(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        com.microsoft.bond.internal.Marshaler.marshal(this, writer);
    }

    /*
     * @see com.microsoft.bond.BondSerializable#write()
     */
    public void write(com.microsoft.bond.ProtocolWriter writer) throws java.io.IOException {
        writer.writeBegin();
        com.microsoft.bond.ProtocolWriter firstPassWriter;
        if ((firstPassWriter = writer.getFirstPassWriter()) != null)
        {
            writeImpl(firstPassWriter, false);
            writeImpl(writer, false);
        }
        else
        {
          writeImpl(writer, false);
        }
        writer.writeEnd();
    }

    public void writeImpl(com.microsoft.bond.ProtocolWriter writer, boolean isBase) throws java.io.IOException {
        boolean canOmitFields = writer.hasCapability(com.microsoft.bond.ProtocolCapability.CAN_OMIT_FIELDS);
        writer.writeStructBegin(Schema.metadata, isBase);
        

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 1, Schema.OriginalText_metadata);
        writer.writeString(OriginalText);
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_LIST, 2, Schema.Words_metadata);
        int size2 = Words.size();
            writer.writeContainerBegin(size2, com.microsoft.bond.BondDataType.BT_STRING);
            for (String item1 : Words) {
                writer.writeString(item1);
            }
            writer.writeContainerEnd();
        writer.writeFieldEnd();

        writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_LIST, 3, Schema.Indices_metadata);
        int size4 = Indices.size();
            writer.writeContainerBegin(size4, com.microsoft.bond.BondDataType.BT_INT32);
            for (Integer item3 : Indices) {
                writer.writeInt32(item3);
            }
            writer.writeContainerEnd();
        writer.writeFieldEnd();

        if (!canOmitFields || (LexicalForm != Schema.LexicalForm_metadata.getDefault_value().getString_value())) {
            writer.writeFieldBegin(com.microsoft.bond.BondDataType.BT_STRING, 4, Schema.LexicalForm_metadata);
            writer.writeString(LexicalForm);
            writer.writeFieldEnd();
        } else {
            writer.writeFieldOmitted(com.microsoft.bond.BondDataType.BT_STRING, 4, Schema.LexicalForm_metadata);
        }

        writer.writeStructEnd(isBase);
    } // writeImpl


    public boolean memberwiseCompare(Object obj) {
        if (obj == null) {
            return false;
        }

        Sentence that = (Sentence)obj;

        return memberwiseCompareQuick(that) && memberwiseCompareDeep(that);
    }

    protected boolean memberwiseCompareQuick(Sentence that) {
        boolean equals = true;
        
        equals = equals && ((this.OriginalText == null) == (that.OriginalText == null));
        equals = equals && (this.OriginalText == null ? true : (this.OriginalText.length() == that.OriginalText.length()));
        equals = equals && ((this.Words == null) == (that.Words == null));
        equals = equals && ((this.Words == null) ? true : (this.Words.size() == that.Words.size()));
        equals = equals && ((this.Indices == null) == (that.Indices == null));
        equals = equals && ((this.Indices == null) ? true : (this.Indices.size() == that.Indices.size()));
        equals = equals && ((this.LexicalForm == null) == (that.LexicalForm == null));
        equals = equals && (this.LexicalForm == null ? true : (this.LexicalForm.length() == that.LexicalForm.length()));
        return equals;
    } // memberwiseCompareQuick

    protected boolean memberwiseCompareDeep(Sentence that) {
        boolean equals = true;
        
        equals = equals && (this.OriginalText == null ? true : this.OriginalText.equals(that.OriginalText));
        if (equals && this.Words != null && this.Words.size() != 0) {
            for (int i1 = 0; i1 < this.Words.size(); ++i1) {
                String val2 = this.Words.get(i1);
                String val3 = that.Words.get(i1);
                equals = equals && ((val2 == null) == (val3 == null));
                equals = equals && (val2 == null ? true : (val2.length() == val3.length()));
                equals = equals && (val2 == null ? true : val2.equals(val3));
                if (!equals) {
                    break;
                }
            }
        }
        if (equals && this.Indices != null && this.Indices.size() != 0) {
            for (int i4 = 0; i4 < this.Indices.size(); ++i4) {
                Integer val5 = this.Indices.get(i4);
                Integer val6 = that.Indices.get(i4);
                equals = equals && (val5 == val6 || val5 != null && val5.equals(val6));
                if (!equals) {
                    break;
                }
            }
        }
        equals = equals && (this.LexicalForm == null ? true : this.LexicalForm.equals(that.LexicalForm));
        return equals;
    } // memberwiseCompareDeep

}; // class Sentence
