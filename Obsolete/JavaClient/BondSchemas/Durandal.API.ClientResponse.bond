import "Durandal.API.Result.bond"
import "Durandal.API.AudioData.bond"
import "Durandal.API.RecoResult.bond"
import "Durandal.API.UrlScope.bond"

namespace csharp Durandal.API
namespace java org.stromberg.durandal.api

struct ClientResponse
{
    // Versioning for this communication
	1: required int32 ProtocolVersion = 6;
	
	// The overall result of the execution (whether the input was ignored, or an error occurred, etc.)
    2: required Result ExecutionResult = Failure;
	
	// Signals to the client that it should start listening for another query immediately
	3: required bool ContinueImmediately = false;
	
	// For text-based clients, this is the plain-format text that should be displayed
    4: string TextToDisplay = "";
	
	// Tells the client to open a web browser to this url
    5: string UrlToOpen = "";
	
	// Tells the client to render this HTML to its display
	6: string HtmlToDisplay = "";
	
	// If ContinueImmediately is set, this is a hint for how long to wait until prompting again
    7: int32 SuggestedRetryDelay;
	
	// If Result == failure, there will usually be some debug information here
	8: string ErrorMessage = "";
	
	// A map of extra data (application-specific) to accompany the response
    9: map<string, string> ResponseData;
	
	// The service may perform additional resolution or transformation on the input query,
	// or it may simply select a different SR hypothesis than what the client chose to display.
	// To minimize confusion to the user, this field is used to display the actual real query
	// that was acted upon by the system
	10: string AugmentedFinalQuery = "";
	
	// The audio that should be played as a response
    11: nullable<AudioData> AudioToPlay;
	
	// An SSML string to be used in speech synthesis (if the client has elected to synthesize its own
	// speech, otherwise the spoken audio will simply be put into AudioToPlay)
	12: string ResponseSSML = "";
	
	// The reco result that triggered this response (mostly for debugging and integration)
	13: nullable<RecoResult> SelectedRecoResult;
	
	/// The scope of the returned URL, if any
	14: UrlScope UrlScope = Unknown;

	// If the client supports it, the server can generate streaming audio that can be read from
	// this URL, as a way to save latency
	15: string StreamingAudioUrl = "";
}