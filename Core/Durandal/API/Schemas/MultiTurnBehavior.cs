
//------------------------------------------------------------------------------
// This code was generated by a tool.
//
//   Tool : Bond Compiler 0.10.0.0
//   File : Durandal.API.MultiTurnBehavior_types.cs
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// <auto-generated />
//------------------------------------------------------------------------------


// suppress "Missing XML comment for publicly visible type or member"
#pragma warning disable 1591


#region ReSharper warnings
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable InconsistentNaming
// ReSharper disable CheckNamespace
// ReSharper disable UnusedParameter.Local
// ReSharper disable RedundantUsingDirective
#endregion

namespace Durandal.API
{
    using Newtonsoft.Json;
    using System.Collections.Generic;

    public class MultiTurnBehavior
    {
        /// <summary>
        /// Indicates that the current conversation is able to continue, carrying over the conversation history and session store to future turns within the same domain.
        /// </summary>
        public bool Continues { get; set; }

        /// <summary>
        /// Indicates that the system should drive the next input proactively. For voice agents this signals a prompt to open the microphone immediately.
        /// </summary>
        public bool IsImmediate { get; set; }

        /// <summary>
        /// If IsImmediate is true, this is the suggested pause delay (in milliseconds) before giving that prompt.
        /// Negative timeouts will default to the platform specific value.
        /// </summary>
        public int SuggestedPauseDelay { get; set; }

        /// <summary>
        /// Indicates how long the conversation state is valid after this turn. The user is allowed to continue the conversation anytime within this period.
        /// After this timeout expires, the conversation state for the current domain is forgotten.
        /// Negative timeouts will default to the platform specific value.
        /// </summary>
        public int ConversationTimeoutSeconds { get; set; }

        /// <summary>
        /// As long as a conversation state with this flag is active, all other domains are excluded from consideration in ranking, thus granting
        /// the current domain exclusive control over all inputs. This should only ever be needed in rare situations, as the platform has the power to
        /// ignore this flag or limit the conversation timeout to prevent abuse.
        /// </summary>
        public bool FullConversationControl { get; set; }
        
        public MultiTurnBehavior()
        {
            ConversationTimeoutSeconds = 60;
            FullConversationControl = false;
        }

        /// <summary>
        /// Specifies that a conversation should not continue (or in other words, the agent has finished talking about the current topic)
        /// </summary>
        public static MultiTurnBehavior None => new MultiTurnBehavior()
        {
            Continues = false,
            IsImmediate = false,
            SuggestedPauseDelay = -1,
            ConversationTimeoutSeconds = -1,
        };

        /// <summary>
        /// Specifies that the conversation should continue with a microphone prompt (if available), using the default delay before the prompt occurrs.
        /// </summary>
        public static MultiTurnBehavior ContinueBasic => new MultiTurnBehavior
        {
            Continues = true,
            IsImmediate = true,
            SuggestedPauseDelay = -1,
            ConversationTimeoutSeconds = 60,
        };

        /// <summary>
        /// Specifies that the conversation should continue with a microphone prompt, and that prompt should open as quickly as possible.
        /// </summary>
        public static MultiTurnBehavior ContinueQuickly => new MultiTurnBehavior
        {
            Continues = true,
            IsImmediate = true,
            SuggestedPauseDelay = 0,
            ConversationTimeoutSeconds = 60,
        };

        /// <summary>
        /// Specifies that the conversation _may_ continue, but the user is not explicitly prompted to continue it. The microphone (if available) is not
        /// opened automatically. From this point the user may abandon the conversation, continue the current conversation, or start a new conversation.
        /// </summary>
        public static MultiTurnBehavior ContinuePassively => new MultiTurnBehavior
        {
            Continues = true,
            IsImmediate = false,
            SuggestedPauseDelay = -1,
            ConversationTimeoutSeconds = 86400,
        };
    }
} // Durandal.API
